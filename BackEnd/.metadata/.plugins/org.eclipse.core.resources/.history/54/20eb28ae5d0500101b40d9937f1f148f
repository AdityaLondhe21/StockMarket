package com.example.demo.trading.service;

import java.math.BigDecimal;
import java.sql.Date;

import org.jvnet.hk2.annotations.Service;
import org.springframework.beans.factory.annotation.Autowired;

import com.example.demo.trading.entity.Transaction;
import com.example.demo.trading.repository.TransactionRepository;

@Service
public class TradingService {
	 	@Autowired
	    private TransactionRepository transactionRepository;
	    
	    @Autowired
	    private UserRepository userRepository;

	    @Autowired
	    private StockRepository stockRepository;

	    public String buyStock(Long userId, Long stockId, int quantity) {
	        // Fetch User
	        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));

	        // Fetch Stock
	        Stock stock = stockRepository.findById(stockId).orElseThrow(() -> new RuntimeException("Stock not found"));

	        // Get Current Stock Price
	        BigDecimal stockPrice = stock.getCurrentPrice();
	        BigDecimal totalCost = stockPrice.multiply(BigDecimal.valueOf(quantity));

	        // Check if User has Sufficient Balance
	        if (user.getBalance().compareTo(totalCost) < 0) {
	            return "Insufficient balance";
	        }

	        // Deduct Balance
	        user.setBalance(user.getBalance().subtract(totalCost));
	        userRepository.save(user);

	        // Save Transaction
	        Transaction transaction = new Transaction();
	        transaction.setType("BUY");
	        transaction.setUser(user);
	        transaction.setStock(stock);
	        transaction.setNoOfShares(quantity);
	        transaction.setAmount(totalCost);
	        transaction.setTimestamp(new Date());
	        transactionRepository.save(transaction);

	        return "Stock purchased successfully!";
	    }
}